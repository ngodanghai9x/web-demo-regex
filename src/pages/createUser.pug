extends ./layout

block content
  .row
    .col
      h2 Create user
      form#userForm(action="/users/create" method="POST" enctype="multipart/form-data") 
        .mb-3
          label.form-label(for='name') name
          input#name.form-control(type='text'  name="name" onblur='onBlur(this.id)')
        .mb-3
          label.form-label(for='phone') phone
          input#phone.form-control(type='text' name="phone" onblur='onBlur(this.id)')
        .mb-3
          .d-flex
            .flex-item 
              label.form-label(for='sex') Gender
              select#sex.form-select(name="sex" aria-label='Default select example' onblur='onBlur(this.id)')
                option(value='0') Select
                option(value='1') Male
                option(value='2') Female
                option(value='3') Unknown
            .flex-item 
              label.form-label(for='birthday') birthday
              input#birthday.form-control(type='date' name="birthday" onblur='onBlur(this.id)')

        .mb-3
          label.form-label(for='email') email
          input#email.form-control(type='text' name="email" onblur='onBlur(this.id)')
        .mb-3
          label.form-label(for='website') website
          input#website.form-control(type='text' name="website" onblur='onBlur(this.id)') 
        .mb-3
          label.form-label(for='description') description
          textarea#description.form-control(type='text' name="description" onblur='onBlur(this.id)')
        //- .mb-3
        //-   label.form-label(for='photos') Photos
        //-   input#photos.form-control(type='file' name="photos" multiple)
        .d-flex.justify-content-end
          button#clearBtn.btn.btn-light(type='button' onclick='onClear()') Clear
          button#createBtn.btn.btn-primary(type='button' onclick='onSubmit()') Create
    .col
      .form-list 
        h2 List user
        ul
        each user in userList
          li.mb-2 Name: #{user.name} ; Phone: #{user.phone || ' '} ; Email: #{user.email || ' ' } ; Birthday: #{user.birthday || ' ' }
        else 
          li Array userList is empty
  //- script(src='pages/js/createUser.js')
  script(src='https://unpkg.com/sweetalert/dist/sweetalert.min.js')
    //-   swal("Hello world");

  script.
    JSON.parse(new URL(window.location.href).searchParams.get('login')) && swal("ƒêƒÉng nh·∫≠p th√†nh c√¥ng !", "", "success")
    var errorMap = {};
    var fieldMap = {
      name: {
        regex: /[\w\s-]{1,255}/i,
        error: 'T√™n ch·ªâ g·ªìm ch·ªØ c√°i, kho·∫£ng tr·∫Øng, v√† k√≠ t·ª± _- v√† c√≥ ƒë·ªô d√†i t·ªëi ƒëa l√† 255',
      },
      phone: {
        regex: /^((09|03|07|08|05)+([0-9]{8})\b)$/,
        error: 'S·ªë ƒëi·ªán tho·∫°i ch·ªâ g·ªìm 10 ch·ªØ s·ªë v√† b·∫Øt ƒë·∫ßu b·∫±ng c√°c ƒë·∫ßu s·ªë 09|03|07|08|05',
      },
      sex: {
        regex: /^[0-3]$/,
        error: 'Gi·ªõi t√≠nh kh√¥ng ƒë√∫ng ƒë·ªãnh d·∫°ng',
      },
      birthday: {
        regex: /^[1-9]\d{3}-[01]\d-[0-3]\d$/,
        error: 'Ng√†y sinh kh√¥ng ƒë√∫ng ƒë·ªãnh d·∫°ng yyyy-mm-dd',
      },
      email: {
        regex: /^[a-z][a-z0-9_\.]{5,32}@[a-z0-9]{2,}(\.[a-z0-9]{2,4}){1,2}$/i,
        error: 'Email kh√¥ng ƒë√∫ng ƒë·ªãnh d·∫°ng',
      },
      website: {
        regex: /^((http:|https:|http:|https:)\/\/(www\.)?)?[a-z0-9]+([-.]{1}[a-z0-9]+)*\.[a-z]{2,255}(:[0-9]{1,5})?(\/.*)?$/i,
        error: 'Website kh√¥ng ƒë√∫ng ƒë·ªãnh d·∫°ng',
      },
      description: {
        regex: /^.{0,2000}$/i,
        error: 'Ch√∫ th√≠ch c√≥ ƒë·ªô d√†i t·ªëi ƒëa l√† 2000 k√≠ t·ª±',
      },
    }
    function onBlur(id) {
      var input = document.getElementById(id);
      if (!fieldMap[id] || !input) return alert(JSON.stringify({ id, value: input && input.value }));

      console.log({ id, value: input.value })

      if (fieldMap[id].regex.test(input.value) || (!input.value && input.id !== 'name')) {
        input.classList.remove('error');
        errorMap[id] = null;
        input.title = '';
        return;
      };

      input.classList.add('error');
      errorMap[id] = fieldMap[id].error;
      input.title = fieldMap[id].error;
      console.warning(fieldMap[id].error)
    }

    function onClear() {
      document.getElementById('js').innerHTML= "<script>alert('hello')</sc"+"ript>";
      Object.keys(fieldMap).forEach(id => {
        document.getElementById(id).value = null;
        document.getElementById(id).title = '';
        document.getElementById(id).classList.remove('error');
      })
    }

    function onSubmit() {
      if (!document.getElementById('name').value) {
        return alert('Tr∆∞·ªùng t√™n kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng')
      }
      var errors = Object.values(errorMap)
      console.log("üöÄcreateUser errorMap", errorMap)
      if (errors && errors.filter(e => !!e).length) {
        return alert(errors.join('; '))
      }
      document.getElementById('userForm').submit();
    }