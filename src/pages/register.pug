extends ./layout

block content
  h2 Register
  form#registerForm(action="/auth/register" method="POST") 
    #error.my-2.text-error #{message}
    .mb-3
      label.form-label(for='Username') Username
      input#username.form-control(type='text'  name="username" onblur='onBlur(this.id)')
    .mb-3
      label.form-label(for='Password') Password
      input#password.form-control(type='password' name="password" onblur='onBlur(this.id)')
    .mb-3
      label.form-label(for='Password2') Re-Password
      input#password2.form-control(type='password' name="password2" onblur='onBlur(this.id)')
    .d-flex.justify-content-end
      button#clearBtn.btn.btn-light(type='button' onclick='onClear()') Clear
      button#createBtn.btn.btn-success(type='button' onclick='onSubmit()') Create
      
  script.
    var error = new URL(window.location.href).searchParams.get('error');
    var ignoreValidate = false;

    if (!!error) {
      alert(error);
    } 
    function compare2Password()  {
      var password = document.getElementById('password');
      var password2 = document.getElementById('password2');
      console.log("compare2Password ", {
        password,
        password2
      })
      if (password && password2 && password.value === password2.value) {
        return true;
      }
      return false;
    }

    var errorMap = {};
    var fieldMap = {
      username: {
        //- regex: /^[a-z_\d]{6,255}$/i,
        regex: ignoreValidate ? /./ : /^[a-z_\d]{6,255}$/i,
        error: 'Tên tài khoản chỉ bao gồm chữ cái, chữ số, dấu _, độ dài tối thiểu là 6 kí tự',
      },
      password: {
        //- regex: /^(?=.*[A-Z])(?=.*[a-z])(?=.*[0-9])(?=.*[#?!@$%^&*+='"<>\]\[\|-]).{8,}$/i,
        regex: ignoreValidate ? /./ : /^(?=.*[A-Z])(?=.*[a-z])(?=.*[0-9])(?=.*[#?!@$%^&*+='"<>\]\[\|-]).{8,}$/i ,
        error: 'Mật khẩu cần tối thiểu 8 ký tự, ít nhất 1 chữ cái viết hoa, 1 chữ cái viết thường và 1 số',
      },
      password2: {
        //- regex: { test: () => compare2Password()},
        regex: ignoreValidate ? /./ : { test: () => compare2Password()} ,
        error: 'Hai mật khẩu không trùng nhau',
      }
    }

   

    function removeErrorById(id) {
      var input = document.getElementById(id);

      input.classList.remove('error');
      errorMap[id] = null;
      input.title = '';
    }

    function appendErrorById(id) {
      var input = document.getElementById(id);

      input.classList.add('error');
      errorMap[id] = fieldMap[id].error;
      input.title = fieldMap[id].error;
      console.log(fieldMap[id].error);
    }

    function onBlur(id) {
      var input = document.getElementById(id);
      if (!fieldMap[id] || !input) return alert(JSON.stringify({ id, value: input && input.value }));

      console.log({ id, value: input.value })

      if (fieldMap[id].regex.test(input.value)) {
        removeErrorById(id);
        return;
      };

      appendErrorById(id);
    }

    function onClear() {
      errorMap = {};
      Object.keys(fieldMap).forEach(id => {
        document.getElementById(id).value = null;
        document.getElementById(id).title = '';
        document.getElementById(id).classList.remove('error');
      })
    }

    function onSubmit() {
      if (ignoreValidate) {
        document.getElementById('registerForm').submit();
        return;
      }

      if (Object.keys(fieldMap).some(id => !document.getElementById(id).value)) {
        return alert('Bạn chưa nhập đủ thông tin', "abc", "error")
      }
      var errors = Object.values(errorMap)
      console.log("register errorMap", errorMap)
      if (errors && errors.filter(e => !!e).length) {
        return alert(errors.join('; '), "", "error")
      }
      document.getElementById('registerForm').submit();
    }
